#include <bits/stdc++.h>
using namespace std;
#define int long long
#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define Jhunjhar_Hova ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


ll npow(ll a, ll b) { 
if(b==0) return 1;   ll res= npow(a, b/2);
if(b%2!=0) return res*res*a;       else return res*res; }


ll modp(ll a,ll b,ll m){ 
 a %= m;     ll res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}


bool myComp(const pair<ll, ll>& a, const pair<ll, ll>& b){ if (a.first != b.first)  return a.first > b.first;  return a.second < b.second;}


ll gcd(ll a , ll b)
{
if(b==0) return a;
a%=b;
return gcd(b,a);
}


bool isPrime(ll n){
    if(n==1) return false;
    if(n==2) return true;
    for(int i=2;i*i<=n;i++){
        if(n%i==0)return false;
    }
    return true;
}
int count_dig(int n){
    ll cnt=0;
    while(n>0) {cnt++, n/=10;}

    return cnt;
}

int32_t main(){
Jhunjhar_Hova


ll t=1;
cin>>t;
ll cnt=0;
while(t--){
    // cout<<cnt<<"  ___ \n";
    // cnt++;

    ll a,b,c,r;
    cin>>a>>b>>c>>r;

    // int flag2=0;
    // if(b>a) {

    // }
    ll A= pow(10, a-1);
    ll C = pow(10, c-1);

    ll B= pow(10, b);
    if(c<max(a,b) || c>max(a,b)+1){
        cout<<-1<<"\n";
        continue;
    }

    ll flag=0;
    ll rank=0;
    ll mi_c= pow(10, c-1), mx_c=pow(10, c)-1;

    for(int i=A;i<pow(10, a); i++){
        int mi =i+ pow(10, b-1);
        int mx = i+pow(10, b)-1;

        int n_mi =max(mi, mi_c);
        int n_mx= min(mx, mx_c);

        ll gap = n_mx-n_mi+1;
        if(gap<0) continue;
        if(rank+gap>=r){
            int bb= pow(10, b-1);
            cout<<i<<" + "<<n_mi+(r-rank-1)-i<<" = "<<n_mi+(r-rank-1)<<"\n";
            flag=1;
            break;
        }
        else 
        rank+= gap;
    }

    if(!flag) cout<<-1<<"\n";


}
return 0;
}
