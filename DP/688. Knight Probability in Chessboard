#define rep(i,n) for(int i=0;i<n;i++)
class Solution {
public:
    vector<vector<int>> d {{-2, -1}, {-2,1}, {-1, 2},{1,2},{2,1},{2,-1},{1,-2},{-1, -2}};
    vector<vector<vector<double>>> dp;
    double recur(int i, int j, int move, int n){
        if(move==0) return dp[i][j][move]=1.0;
        
        if(dp[i][j][move]!=-1.0) return dp[i][j][move];
        double ans=0.0;
        
        rep(h, 8){
            int ni=i+d[h][0], nj=j+d[h][1];
            if(ni>=0 && ni<n && nj>=0 && nj<n){
                ans += recur(ni, nj, move-1, n);
            }
        }
        return dp[i][j][move] = ans/8.0;
        
    }
    
    double knightProbability(int n, int k, int row, int column) {
        dp.assign(n+1, vector<vector<double>> (n+1, vector<double>(k+1, -1.0) ));
        
        return recur(row, column, k, n);
    }
};
