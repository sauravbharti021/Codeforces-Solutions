#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
class Solution {
public:
    
    /*
        
        7 2 3 6  --- 0 0 1 2
        
        i=0, 0th char= 0, 1, 2, 3, 4 ,5 ,6, 7
    
        i=0, [0]=7
        70_ _, 71_ _, 72 _ _
        
        i=0 && i=1 
        7 0 0 _, 7 0 1 _, 7 0 2 _, 7 0 3 _
        
        i=0 && i=1 && i=2
        
    */
    
    int K;
    int dp[11][11][21][11][11];
    ll recur(int i, int limit, ll sum, int odd, int isZero, int actual_length, vector<int> &digits ){
        if(i>=digits.size()){
            
            if(odd == actual_length-odd && sum>0 && !isZero && sum%K==0)
                return 1;
            return 0;
        }
        if(dp[i][limit][sum%K][odd][actual_length]!=-1) return dp[i][limit][sum%K][odd][actual_length];
        
        int end=9;
        if(limit)
            end= digits[i];
        
        ll ans=0;
        for(int j=0;j<=end; j++){
            ans+= recur(i+1, (limit && (j==end)), (sum*10)+j, odd+ (j%2==0 ? 0: 1), (isZero && j==0), (isZero && j==0) ? actual_length: actual_length+1, digits );
        }
        
        return dp[i][limit][sum%K][odd][actual_length] = ans;
    }
    
    ll cnt(int x){
        vector<int> digits;
        memset(dp, -1, sizeof(dp));

        ll now=x;
        
        while(now>0){
            digits.pb(now%10);
            now/=10;
        }
        reverse(all(digits));
        
        return recur(0, 1, 0, 0, 1, 0, digits);
    }
    int numberOfBeautifulIntegers(int low, int high, int k) {
        K=k;
        return cnt(high) - cnt(low-1);
    }
};
