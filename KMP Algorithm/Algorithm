For KMP, you can watch Abdul Bari video for more clarity - "https://www.youtube.com/watch?v=V5-7GzOfADQ&t=904s", 

  It's more easy to implement if we compare it with rolling hash, both can we very useful in different circumstances. 
  But overall this seems better.

  s="ababsdababc"
  t= "ababc"
  So, the string that we are looking to match, i.e in this case t.

  so, we will create a longest prefix suffix array as LPS.
  indexing is very important so, we careful and keep index 0 free.

  0 1 2 3 4 5
    a b a b c
  0 0 0 1 2 0

so, we compare for j+1 and whenever our j+1 doesn't match with main string 's', we simply retract back our j = lps[j]. Something like we do in time of finding
prime factors using sieve of eratosthenes.

Just be careful about indexing, that's all.






  



Problem - https://practice.geeksforgeeks.org/contest/job-a-thon-21-hiring-challenge/problems
You're provided with two arrays:

"geeksTown" of length n - representing the heights of buildings in Geek's town
"journey" of length m      - representing the heights of buildings he sees during his train journey.
Geek finds happiness when he encounters a series of buildings during his journey that completely match with geeksTown.

You have 'q' queries of the form [l, r], where you need to determine how many times Geek will feel happy during the journey  from [l, r].

Input:
n = 4,
geeksTown[] = {3, 0, 1, 9},
m = 11,
journey[] = {1, 3, 0, 1, 9, 1, 7, 3, 0, 1, 9},
q = 4,
queries[] = [
 [0, 3],
 [1, 5],
 [1, 10],
 [7, 9]
]
Output:
0 1 2 0


// Code


#include <bits/stdc++.h>
using namespace std;
#define int long long
#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for (int i = n - 1; i >= 0; i--)
#define rep(i, n) for (int i = 0; i < n; i++)
#define Jhunjhar_Hova ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);

ll npow(ll a, ll b)
{
    if (b == 0)
        return 1;
    ll res = npow(a, b / 2);
    if (b % 2 != 0)
        return res * res * a;
    else
        return res * res;
}

ll modp(ll a, ll b, ll m)
{
    a %= m;
    ll res = 1;
    while (b > 0)
    {
        if (b & 1)
            res = res * a % m;
        a = a * a % m;
        b >>= 1;
    }
    return res;
}

bool myComp(const pair<ll, ll> &a, const pair<ll, ll> &b)
{
    if (a.first != b.first)
        return a.first > b.first;
    return a.second < b.second;
}

ll gcd(ll a, ll b)
{
    if (b == 0)
        return a;
    a %= b;
    return gcd(b, a);
}

bool isPrime(ll n)
{
    if (n == 1)
        return false;
    if (n == 2)
        return true;
    for (int i = 2; i * i <= n; i++)
    {
        if (n % i == 0)
            return false;
    }
    return true;
}
// abcdabeabc
// 0000120123

vector<int> geeksJourney(vector<int> &geeksTown, int n, vector<int> &journey, int m,  vector<vector<int>> &queries, int q){

    vector<int> lps(n+2, 0);
    int j=0;

    for(int i=2;i<=n;i++){
        if(geeksTown[i-1]==geeksTown[j]){
            lps[i]= j+1;
            j++;
        }else{
            j=0;
            if(geeksTown[i-1]==geeksTown[j]){
                lps[i]=j+1;
                j++;
            }
        }
    }

    vector<int> fre(m, 0);

    j= 0;
    vector<int> lol(n+2, 0);
    for(int i=1;i<=n;i++) lol[i] = geeksTown[i-1];

    rep(i,m){
        if(journey[i]== lol[j+1]){
            j++;
        }else{
            j= lps[j];
            if(journey[i]== lol[j+1]){
                j++;
            }
        }

        if(j>=n){
            j= lps[j];
            fre[i]++;
        }
    }


    vector<int>pre(m,0);
    rep(i,m){
        pre[i]=(i>0 ? pre[i-1] : 0) + fre[i];
    }

    vector<int> ans;
        

    rep(i, q){
        ll l= queries[i][0], r= queries[i][1];
        if(l>r) swap(r,l);

        if(r-l+1<n) {ans.pb(0); continue;}

        ll right= pre[r];
        ll left= (l+n-2>=0 ? pre[l+n-2] : 0);

        ans.pb(max((ll)0, right-left)); 
    }

    return ans;

}

int32_t main()
{
    Jhunjhar_Hova

        int n;
    cin >> n;
    vector<int> a(n);
    rep(i, n)
    {
        cin >> a[i];
    }
    int m;
    cin>>m;
    vector<int> journey(m);

    rep(i,m) cin>>journey[i];
    int q;
    cin>>q;
    vector<vector<int>> queries(q);
    rep(i, q){
        int x, y;
        cin>>x>>y;
        queries[i].pb(x);
        queries[i].pb(y);
    }
    vector<int> ans= geeksJourney(a, n, journey, m,  queries, q);

    rep(i, ans.size()) cout<<ans[i]<<" ";
    cout<<"\n";
    
}
