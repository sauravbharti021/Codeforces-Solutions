#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
class Solution {
public:
    
ll modp(ll a,ll b,ll m){ 
 a %= m;     ll res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}
    vector<ll> pw1, pw2, inv1, inv2;
    
    vector<ll> helper(string &s, int mod1){
        int n= s.size();
        int p = 31;
        
        for(int i=1; i<n; i++) {
            pw1[i] = (pw1[i-1] * p)%mod1;
        }
        
        vector<ll> hash1(n+1, 0);
        ll i_1 = modp(p, mod1-2, mod1);
        
        for(int i=1; i<n; i++){
            inv1[i]= (inv1[i-1]* i_1 )%mod1;
            if(inv1[i]<0) inv1[i] +=mod1;
        }
        
        rep(i,n){
            hash1[i] = ((i>0 ? hash1[i-1] : 0) + ( modp(p, i, mod1) * ((s[i] - 'a') +1) )%mod1 )%mod1;
            if(hash1[i]<0) hash1[i]+=mod1;
        }
        
        return hash1;
    }
    // returns prefixed vector with presence
    vector<ll> prefixFinder(string &s, string &target, vector<ll> &hashedS, int mod1){
        int n = s.size();
        vector<ll> store;
        
        vector<ll> hashedtarget = helper(target, mod);
        ll m = target.size();
        ll hash = hashedtarget[m-1];
        for(int i=m-1;i<n;i++){
            if((i-m+1)>=0){
                ll val = (hashedS[i] - (i-m>=0 ? hashedS[i-m] : 0))%mod1;
                val = (val * inv1[i-m+1])%mod1;
                val%=mod1;
                if(val<0) val+=mod1;
                if(val==hash){
                    store.push_back(i-m+1);
                }
            }
            
        }
        return store;
    }
    int indexFinder(int left, int right, vector<ll> &toCheck, int target){
        auto it= lower_bound(all(toCheck), target);
        if(it==toCheck.end()) return -1;
        int index = it - toCheck.begin();
        if(toCheck[index]>=left && toCheck[index]<=right) return toCheck[index];
        return -1;
    }
    
    int shortestMatchingSubstring(string s, string p) {
        int n= s.size();
        pw1.assign(n, 1);
        pw2.assign(n,1);
        
        inv1.assign(n,1);
        inv2.assign(n,1);
        vector<ll> hashedS= helper(s, mod);
        vector<string> seg;
        string temp="";
        rep(i,p.size()){
            if(p[i]=='*'){
                if(temp.size()>0)
                seg.push_back(temp);
                temp="";
            }else{
                temp+= p[i];
            }
        }
        if(temp.size()>0) seg.pb(temp);
        if(seg.size()==0) return 0;
        
        vector<ll> leftP= prefixFinder(s, seg[0], hashedS, mod);
        
        vector<ll>  rightP, middleP;
        if(seg.size()>=2){
            string right = seg.back();
            rightP = prefixFinder(s, right, hashedS, mod);;
        }
        if(seg.size()==3){
            string middle = seg[1];
            middleP = prefixFinder(s, middle, hashedS, mod);;
        }
        
        int flag = 0;
        int l = 0, r= n+1;
        
        while(r-l>1){
            int mid = (l+r)/2;
            int lFlag = 0;
            for(int i=mid-1;i<n;i++){
                int leftB = i-mid;
                int rightB = i;
                ll cl=0, cr=0, cm=0;
                int str=i-mid+1;
                str = indexFinder(leftB, rightB, leftP, str);
                if(str==-1 || (str+seg[0].size()-1)> rightB) continue;

                if(seg.size()==3){
                    str = indexFinder(leftB, rightB, middleP, str+seg[0].size());
                    if(str==-1 || (str+seg[1].size()-1)>rightB) continue;
                }
                if(seg.size()>=2){
                    str = indexFinder(leftB, rightB, rightP, str+ (seg.size()==3 ? seg[1].size() : seg[0].size()) );
                    if(str==-1 || (str+(seg.size()==2 ? seg[1].size() : seg[2].size()) - 1)>rightB) continue;
                }
                
                lFlag = 1;
                break;
            }
            if(lFlag){
                flag = 1;
                r=mid;
            }else{
                l=mid;
            }
        }
        
        if(!flag) return -1;
        return r;
         
    }
};
