#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
struct DSU{
    vector<int> par, rank;
    void makeset(int n){
        par.assign(n+2,0);
        rank.assign(n+2, 1);
        
        rep(i,n+1) par[i]=i;
    }
    int find(int x){
        while(par[x]!=x)
            x= par[x];
        return x;
    }
    void unite(int u, int v){
        u= find(u);
        v= find(v);
        
        if(u!=v){
            if(rank[u]<rank[v]){
                par[u]=v;
                rank[v]+= rank[u];
            }else{
                par[v]=u;
                rank[u]+= rank[v];
            }
        }
    }
};
class Solution {
public:
    int minCostConnectPoints(vector<vector<int>>& points) {
        
        int n= points.size();
        vector<vector<int>> adj;
        rep(i,n){
            for(int j=i+1;j<n;j++){
                vector<int> now;
                ll d= abs(points[i][0]-points[j][0]) + abs(points[i][1]- points[j][1]);
                now.pb(d);
                now.pb(i);
                now.pb(j);
                adj.pb(now);
            }
        }
        sort(all(adj));
        DSU d;
        d.makeset(n+1);
        
        ll cost=0;
        
        rep(i, adj.size()){
            ll u= adj[i][1], v=adj[i][2];
            if(d.find(u)!=d.find(v)){
                cost+= adj[i][0];
                d.unite(u, v);
            }
        }
        
        return cost;
    }
};
