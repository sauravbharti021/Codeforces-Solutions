#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
class Solution {
public:
    
    ll modp(ll a,ll b,ll m){ 
 a %= m;     ll res = 1;  while (b > 0) { if (b & 1)    res = res * a % m;      a = a * a % m;  b >>= 1; }
return res;}
    
    vector<int> prime;
    Solution(){
        prime.assign(1e5+1, 0);
        for(ll i=2;i<=1e5;i++){
            if(prime[i]==0){
                prime[i]=i;
                for(ll p= i*i; p<=1e5; p+=i){
                    prime[p]=i;
                }
            }
        }
    }
    int maximumScore(vector<int>& nums, int k) {
        int n=nums.size();
        
        vector<int> fre(n);
        rep(i,n){
            ll x= nums[i];
            while(x>1){
                int now= prime[x];
                fre[i]++;
                while(x>1 && x%now==0) x/=now;
            }
        }
        vector<int> left(n,0), right(n,0);
        stack<pair<int,int>> s1;
        
        rep(i,n){
            
            while(!s1.empty() && s1.top().ff<fre[i]) s1.pop();
            
            if(s1.empty()) left[i]+= (i);
            else left[i]+= (i- s1.top().ss -1 );
           
            
            s1.push({fre[i], i});
        }
        
        stack<pair<int,int>> s2;
        rrep(i,n){
            while(!s2.empty() && s2.top().ff <=fre[i]) s2.pop();
            if(s2.empty()) right[i]=  (n- i -1);
            else right[i] +=    (s2.top().ss - i - 1);
            
            s2.push({fre[i], i});
        }
        
        vector<pair<int,int>> a;
        rep(i,n) {
           
            ll now = ( (left[i]+1)* (right[i]+1) )%mod ;
            
            if(now<0) now+= mod;
            now%=mod;
            a.pb({nums[i], now});
            
        }
        
        sort(all(a), greater<pair<int,int>>());
        
        ll ans=1;
        
        rep(i,n){
            if(k>=a[i].ss){
                ans = (ans * modp(a[i].ff, a[i].ss, mod)%mod)%mod;
                if(ans<0) ans+= mod;
                ans%=mod;
                k-= a[i].ss;
            }else{
                
                ans = (ans * modp(a[i].ff, k, mod)%mod)%mod;
                if(ans<0) ans+= mod;
                ans%=mod;
                break;
            }
            if(k==0) break;
        }
        if(ans<0) ans+= mod;
        ans%=mod;
        return ans;
    }
};
