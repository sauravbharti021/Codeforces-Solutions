#define rep(i,n) for(int i=0;i<n;i++)
#define ll long long
class Solution {
public:
    int minimumTime(int n, vector<vector<int>>& relations, vector<int>& time) {
        
        // Topological Sorting -> Child to parent(leaf to parent)
        vector<unordered_set<int>> child(n+1);
        vector<int> degree(n+1,0);
        
        rep(i,relations.size()){
            int c= relations[i][1];
            int p= relations[i][0];
            
            if(child[c].find(p)==child[c].end()){
                child[c].insert(p);
                degree[p]++;
            }
        }
        
        ll cost =0;
        queue<int> q;
        vector<int> dis(n+1, 0);
        rep(i,n){
            if(degree[i+1]==0){
                q.push(i+1);
                dis[i+1]= time[i];
                cost = max(cost, (ll)dis[i+1]);
            }
        }
        
        while(!q.empty()){
            ll x= q.front();
            q.pop();

            for(auto i: child[x]){
                dis[i] = max(dis[i], time[i-1]+ dis[x]);
                cost = max(cost, (ll)dis[i]);
                degree[i]--;
                if(degree[i]==0){
                    q.push(i);
                }
            }

        }
        return cost;
        
        
        
    }
};
